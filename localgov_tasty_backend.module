<?php

/**
 * @file
 * Localgov tasty backend module file.
 */

use Drupal\localgov_roles\RolesHelper;
use Drupal\user\Entity\Role;
use Symfony\Component\Routing\Exception\RouteNotFoundException;

/**
 * Implements hook_localgov_roles_default().
 */
function localgov_tasty_backend_localgov_roles_default(): array {

  // Grant tasty backend permissions to localgov roles.
  $tb_permissions = [
    'access tasty backend admin pages',
    'view tb_manage in toolbar',
  ];

  $perms = [
    RolesHelper::EDITOR_ROLE => $tb_permissions,
    RolesHelper::AUTHOR_ROLE => $tb_permissions,
    RolesHelper::CONTRIBUTOR_ROLE => $tb_permissions,

    // Allow user manager to assign content admin role.
    RolesHelper::USER_MANAGER_ROLE => [
      'assign content_admin role',
      'assign tb_media_admin role',
      'view tb_manage in toolbar',
    ],
  ];

  // Get a list of all vocalbularies for checking permissions.
  $vocabularies = \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')->getQuery()->execute();

  // Load all roles for checking if additional permissions need to be assigned.
  $roles = Role::loadMultiple();
  foreach ($roles as $role) {

    // Check if a role has any taxonomy permissions, and if so assign the role
    // the access taxonomy overview so the role can access the taxonomy menu.
    $has_term_permission = FALSE;
    foreach ($vocabularies as $vocabulary) {
      $create = $role->hasPermission('create terms in ' . $vocabulary);
      $edit = $role->hasPermission('edit terms in ' . $vocabulary);
      $delete = $role->hasPermission('delete terms in ' . $vocabulary);
      if ($create || $edit || $delete) {
        $has_term_permission = TRUE;
        break;
      }
    }
    if ($has_term_permission) {
      $perms[$role->id()][] = 'access taxonomy overview';
    }

    // If the role can access media overview, assign the role tasty backend
    // equivilent permission.
    // @todo Check if we should remove the access media overview permission.
    if ($role->hasPermission('access media overview')) {
      $perms[$role->id()][] = 'access tasty backend media admin pages';
    }

  }

  return $perms;
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function localgov_tasty_backend_menu_links_discovered_alter(&$links) {

  // Populate the moderate content menu.
  // Content moderation.
  if (_localgov_tasty_backend_route_exists('view.moderated_content.moderated_content')) {
    $links['localgov_tasty_backend.view.moderated_content.moderated_content'] = [
      'title' => t('Moderated content'),
      'route_name' => 'view.moderated_content.moderated_content',
      'parent' => 'localgov_tasty_backend.moderate_content_page',
      'menu_name' => 'tb-manage',
      'weight' => -1,
    ];
  }
  elseif (_localgov_tasty_backend_route_exists('content_moderation.admin_moderated_content')) {
    $links['localgov_tasty_backend.content_moderation.admin_moderated_content'] = [
      'title' => t('Moderated content'),
      'route_name' => 'content_moderation.admin_moderated_content',
      'parent' => 'localgov_tasty_backend.moderate_content_page',
      'menu_name' => 'tb-manage',
      'weight' => -1,
    ];
  }
  // Approve content.
  if (_localgov_tasty_backend_route_exists('view.localgov_approvals_dashboard.approvals_dashboard')) {
    $links['localgov_tasty_backend.view.localgov_approvals_dashboard.approvals_dashboard'] = [
      'title' => t('Approve content'),
      'route_name' => 'view.localgov_approvals_dashboard.approvals_dashboard',
      'parent' => 'localgov_tasty_backend.moderate_content_page',
      'menu_name' => 'tb-manage',
    ];
  }
  // Review content.
  if (_localgov_tasty_backend_route_exists('view.localgov_needs_review.needs_review')) {
    $links['localgov_tasty_backend.view.localgov_needs_review.needs_review'] = [
      'title' => t('Review content'),
      'route_name' => 'view.localgov_needs_review.needs_review',
      'parent' => 'localgov_tasty_backend.moderate_content_page',
      'menu_name' => 'tb-manage',
    ];
  }

  // Populate the site features menu.
  // URL alias.
  if (_localgov_tasty_backend_route_exists('entity.path_alias.collection')) {
    $links['localgov_tasty_backend.path_alias.collection'] = [
      'title' => t('URL aliases'),
      'route_name' => 'entity.path_alias.collection',
      'parent' => 'localgov_tasty_backend.manage_site_page',
      'menu_name' => 'tb-manage',
    ];
  }
  // URL redirects.
  if (_localgov_tasty_backend_route_exists('redirect.list')) {
    $links['localgov_tasty_backend.redirect.list'] = [
      'title' => t('URL redirects'),
      'route_name' => 'redirect.list',
      'parent' => 'localgov_tasty_backend.manage_site_page',
      'menu_name' => 'tb-manage',
    ];
  }
  // Alert banners.
  if (_localgov_tasty_backend_route_exists('entity.localgov_alert_banner.collection')) {
    $links['localgov_tasty_backend.entity.localgov_alert_banner.collection'] = [
      'title' => t('Alert banners'),
      'route_name' => 'entity.localgov_alert_banner.collection',
      'parent' => 'localgov_tasty_backend.manage_site_page',
      'menu_name' => 'tb-manage',
    ];
  }
  // Page components.
  if (_localgov_tasty_backend_route_exists('entity.paragraphs_library_item.collection')) {
    $links['localgov_tasty_backend.entity.paragraphs_library_item.collection'] = [
      'title' => t('Page components'),
      'route_name' => 'entity.paragraphs_library_item.collection',
      'parent' => 'localgov_tasty_backend.manage_site_page',
      'menu_name' => 'tb-manage',
    ];
  }
  // Locations.
  if (_localgov_tasty_backend_route_exists('entity.geo_entity.collection')) {
    $links['localgov_tasty_backend.entity.geo_entity.collection'] = [
      'title' => t('Locations'),
      'route_name' => 'entity.geo_entity.collection',
      'parent' => 'localgov_tasty_backend.manage_site_page',
      'menu_name' => 'tb-manage',
    ];
  }
  // Directory facet types.
  if (_localgov_tasty_backend_route_exists('entity.localgov_directories_facets_type.collection')) {
    $links['localgov_tasty_backend.entity.localgov_directories_facets_type.collection'] = [
      'title' => t('Directory facet types'),
      'route_name' => 'entity.localgov_directories_facets_type.collection',
      'parent' => 'localgov_tasty_backend.manage_site_page',
      'menu_name' => 'tb-manage',
    ];
  }
  // Directory facets.
  if (_localgov_tasty_backend_route_exists('entity.localgov_directories_facets.collection')) {
    $links['localgov_tasty_backend.entity.localgov_directories_facets.collection'] = [
      'title' => t('Directory facets'),
      'route_name' => 'entity.localgov_directories_facets.collection',
      'parent' => 'localgov_tasty_backend.manage_site_page',
      'menu_name' => 'tb-manage',
    ];
  }
  // Scheduled transitions.
  if (_localgov_tasty_backend_route_exists('entity.scheduled_transition.collection')) {
    $links['localgov_tasty_backend.entity.scheduled_transition.collection'] = [
      'title' => t('Scheduled Transitions'),
      'route_name' => 'entity.scheduled_transition.collection',
      'parent' => 'localgov_tasty_backend.manage_site_page',
      'menu_name' => 'tb-manage',
    ];
  }
  // Locked content.
  if (_localgov_tasty_backend_route_exists('view.locked_content.page_1')) {
    $links['localgov_tasty_backend.view.locked_content.page_1'] = [
      'title' => t('Locked content'),
      'route_name' => 'view.locked_content.page_1',
      'parent' => 'localgov_tasty_backend.manage_site_page',
      'menu_name' => 'tb-manage',
    ];
  }
  // Fix 404 pages.
  if (_localgov_tasty_backend_route_exists('view.redirect_404.page_1')) {
    $links['localgov_tasty_backend.view.locked_content.page_1'] = [
      'title' => t('Fix 404 pages'),
      'route_name' => 'view.redirect_404.page_1',
      'parent' => 'localgov_tasty_backend.manage_site_page',
      'menu_name' => 'tb-manage',
    ];
  }
}

/**
 * Implements hook_toolbar_alter().
 */
function localgov_tasty_backend_toolbar_alter(&$items) {
  if (!empty($items['administration'])) {
    $items['administration']['tab']['#title'] = t('Administration');
  }
}

/**
 * Check if a route exits without raising exception.
 *
 * @param string $route_to_check
 *   String of Drupal route to check.
 *
 * @return bool
 *   TRUE if route exists.
 *   FALSE otherwise.
 */
function _localgov_tasty_backend_route_exists(string $route_to_check) :bool {
  try {
    \Drupal::service('router.route_provider')
      ->getRouteByName($route_to_check);
  }
  catch (RouteNotFoundException $exception) {
    return FALSE;
  }
  return TRUE;
}
